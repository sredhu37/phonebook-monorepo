{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/persons.js","components/Notification.js","components/App.js","index.js"],"names":["Filter","props","searchName","handleSearchNameChange","value","onChange","PersonForm","submitForm","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Persons","updateSearchResults","baseUrl","axios","get","newPerson","post","id","updatedPerson","put","delete","Notification","messageClass","message","output","className","App","useState","persons","setPersons","setNewName","setNewNumber","setNewSearchName","notificationMessage","setNotificationMessage","notificationType","setNotificationType","displayNotification","msg","setTimeout","useEffect","personsService","then","response","data","catch","error","event","target","preventDefault","filter","person","name","length","number","console","log","concat","window","confirm","existingPerson","find","newPersonInfo","map","toLowerCase","includes","key","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.913e6984.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = (props) => {\r\n    const { searchName, handleSearchNameChange} = props;\r\n\r\n    return (\r\n        <div>\r\n            filter shown with <input value={searchName} onChange={handleSearchNameChange}></input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst PersonForm = (props) => {\r\n    const { submitForm, newName, handleNameChange, newNumber, handleNumberChange } = props;\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={submitForm}>\r\n                <div>\r\n                    name: <input value={newName} onChange={handleNameChange} />\r\n                </div>\r\n                <div>\r\n                    number: <input value={newNumber} onChange={handleNumberChange} />\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">add</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\n\r\nconst Persons = ({updateSearchResults}) => {\r\n    return (\r\n        <div>\r\n            {updateSearchResults()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Persons;\r\n","import axios from 'axios';\r\nconst baseUrl = 'http://localhost:3001/api/persons';\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl);\r\n}\r\n\r\nconst create = (newPerson) => {\r\n    return axios.post(baseUrl, newPerson);\r\n}\r\n\r\nconst update = (id, updatedPerson) => {\r\n    return axios.put(`${baseUrl}/${id}`, updatedPerson);\r\n}\r\n\r\nconst deleteOne = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`);\r\n}\r\n\r\nexport default {getAll, create, update, deleteOne};\r\n","import React from 'react';\r\nimport '../css/style.css';\r\n\r\nconst Notification = (props) => {\r\n    const { message, type } = props;\r\n\r\n    let output = null;\r\n    let messageClass;\r\n\r\n    if(type === 'SUCCESS') {\r\n        messageClass = 'success notification';\r\n    } else if(type === 'ERROR'){\r\n        messageClass = 'error notification';\r\n    } else if(type === 'INFO') {\r\n        messageClass = 'info notification';\r\n    } else {\r\n        messageClass = '';\r\n    }\r\n\r\n    if(message !== '') {\r\n        output = (\r\n            <div className={messageClass}>\r\n                {message}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Filter from './Filter';\r\nimport PersonForm from './PersonForm';\r\nimport Persons from './Persons';\r\nimport personsService from '../services/persons';\r\nimport Notification from './Notification';\r\n\r\nconst App = () => {\r\n    const [ persons, setPersons] = useState([]);\r\n\r\n    const [ newName, setNewName ] = useState('');\r\n    const [ newNumber, setNewNumber ] = useState('0000000000');\r\n    const [ searchName, setNewSearchName ] = useState('');\r\n    const [ notificationMessage, setNotificationMessage ] = useState('');\r\n    const [ notificationType, setNotificationType ] = useState('');\r\n\r\n    const displayNotification = (msg, type) => {\r\n        setNotificationType(type);\r\n        setNotificationMessage(msg);\r\n\r\n        setTimeout(() => {\r\n            setNotificationType('');\r\n            setNotificationMessage('');\r\n        }, 5000)\r\n    }\r\n\r\n    const fetchDataFromServer = () => {\r\n        personsService\r\n            .getAll()\r\n            .then((response) => {\r\n            setPersons(response.data);\r\n            })\r\n            .catch((error) => {\r\n                displayNotification(`Cannot fetch data from server: ${error}`, 'ERROR');\r\n            });\r\n    }\r\n\r\n    useEffect(fetchDataFromServer, []);\r\n\r\n    const submitForm = (event) => {\r\n        event.preventDefault();\r\n\r\n        if((persons.filter(person => person.name === newName)).length === 0) {\r\n            const newPerson = {\r\n                id: persons.length + 1,\r\n                name: newName,\r\n                number: newNumber\r\n            };\r\n\r\n            personsService\r\n                .create(newPerson)\r\n                .then(response => {\r\n                    console.log('Response returned by Backend: ', response.data);\r\n                    setPersons(persons.concat(response.data));\r\n                    setNewName('');\r\n                    setNewNumber('0000000000');\r\n\r\n                    displayNotification(`Added ${response.data.name}`, 'SUCCESS');\r\n                })\r\n                .catch(error => {\r\n                    displayNotification(`Error while sending new user to server: ${error}`, 'ERROR');\r\n                });\r\n        } else {\r\n            const result = window.confirm(`newName is already added to phonebook, replace the old number with a new one?`);\r\n            if(result) {\r\n                const existingPerson = persons.find(person => person.name === newName);\r\n                const newPersonInfo = { ...existingPerson, number: newNumber }\r\n\r\n                personsService\r\n                    .update(existingPerson.id, newPersonInfo)\r\n                    .then(response => {\r\n                        setPersons(persons.map(person => {\r\n                            if(person.id === existingPerson.id) {\r\n                                person = response.data;\r\n                            }\r\n                            return person;\r\n                        }));\r\n\r\n                        displayNotification(`Updated ${response.data.name}`, 'SUCCESS');\r\n                    })\r\n                    .catch(error => {\r\n                        displayNotification(`Error in updating the number for ${existingPerson.name}`, 'ERROR');\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value);\r\n    }\r\n\r\n    const handleNumberChange = (event) => {\r\n        setNewNumber(event.target.value);\r\n    }\r\n\r\n    const deletePerson = (id, name) => {\r\n        const result = window.confirm(`Delete ${name}`);\r\n        if(result) {\r\n            personsService\r\n            .deleteOne(id)\r\n            .then(response => {\r\n                setPersons(persons.filter(person => person.id !== id));\r\n                displayNotification(`Deleted ${name}`, 'INFO');\r\n            })\r\n            .catch(error => {\r\n                displayNotification(`Error in deleting the person: ${error}`, 'ERROR');\r\n            });\r\n        }\r\n    }\r\n\r\n    const updateSearchResults = () => {\r\n        const filteredPersons = persons.filter(person => person.name.toLowerCase().includes(searchName.toLowerCase()));\r\n        return filteredPersons.map(person => (<p key={person.id}>{person.name} {person.number} <button onClick={() => deletePerson(person.id, person.name)}>delete</button></p>));\r\n    }\r\n\r\n    const handleSearchNameChange = (event) => {\r\n        setNewSearchName(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n\r\n            <Filter searchName={searchName} handleSearchNameChange={handleSearchNameChange}/>\r\n\r\n            <h3>add a new</h3>\r\n            <Notification message={notificationMessage} type={notificationType}/>\r\n            <PersonForm submitForm={submitForm} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\r\n\r\n            <h2>Numbers</h2>\r\n            <Persons updateSearchResults={updateSearchResults} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}